import discord  # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Discord API
from discord.ext import commands  # –ò–º–ø–æ—Ä—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
import json  # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
import logging  # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import os  # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import sqlite3  # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from datetime import datetime, timedelta  # –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
from dotenv import load_dotenv  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
import asyncio
from discord.ui import View, Button, Modal, TextInput
import secrets
import aiohttp
from aiogram import Bot as TelegramBot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore)
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DISCORD_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not DISCORD_TOKEN:
    raise ValueError("DISCORD_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –≤—Å–µ –ª–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª 'bot.json'
logging.basicConfig(filename='../bot.json', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞ config.json (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
config_file_path = "../config.json"
with open(config_file_path, "r") as config_file:
    config = json.load(config_file)

# –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
FINE_CHANNEL_ID = config["FINE_CHANNEL_ID"]
NOTIFY_CHANNEL_ID = config["NOTIFY_CHANNEL_ID"]
LOG_CHANNEL_ID = config["LOG_CHANNEL_ID"]
ROLE_ID = config["ROLE_ID"]
CONTENT_MAKER_ROLE_ID = config["CONTENT_MAKER_ROLE_ID"]
FINANCIER_ROLE_ID = config["FINANCIER_ROLE_ID"]
FINE_ROLE_ID = config["FINE_ROLE_ID"]
DM_LOG_CHANNEL_ID = config["DM_LOG_CHANNEL_ID"]
LOG_ALL_CHANNEL_ID = config["LOG_ALL_CHANNEL_ID"]  # ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ –ª–æ–≥–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
telegram_bot = TelegramBot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π (intents) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–æ–±—ã—Ç–∏–π –æ—Ç Discord
intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
intents.members = True
intents.message_content = True

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "!" –∏ –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º–∏
bot = commands.Bot(command_prefix="!", intents=intents)
bot.remove_command("help")
DB_NAME = "../bot.db"  # –ò–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã Telegram
@dp.message(Command('start'))
async def handle_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Hell Branch.\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–¥–µ—Å—å, –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π Discord –∞–∫–∫–∞—É–Ω—Ç "
            "—Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/link –ö–û–î`, –≥–¥–µ –ö–û–î - —ç—Ç–æ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤ Discord."
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/link abc123`\n\n"

            "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª: https://t.me/+ActeXmEZK9U4OWUy\n\n"
            "–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ–±–æ–∏—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö!",  
            
        )
        logging.info(f"Telegram: –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {e}")

@dp.message(Command('link'))
async def handle_link(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/link –ö–û–î`\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/link abc123`"
            )
            return
            
        code = parts[1].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ —Å–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å
        if await verify_link_code(code, message.from_user.id, message.from_user.username):
            await message.answer(
                "‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω—ã!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram."
            )
            logging.info(f"Telegram: –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–¥.\n"
                "–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ Discord —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `!link_telegram`"
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_link: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command('help'))
async def handle_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        await message.answer(
            "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/link –ö–û–î - –ü—Ä–∏–≤—è–∑–∞—Ç—å Discord –∞–∫–∫–∞—É–Ω—Ç\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_help: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏
        await telegram_bot.delete_webhook(drop_pending_updates=True)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await dp.start_polling(telegram_bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")

# --- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º ---

class DepositModal(Modal, title="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"):
    member = TextInput(label="–£—á–∞—Å—Ç–Ω–∏–∫ (ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)")
    amount = TextInput(label="–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")

    async def on_submit(self, interaction: discord.Interaction):
        ctx = await bot.get_context(interaction.message)
        try:
            member_obj = interaction.guild.get_member(int(self.member.value))
            amount_value = int(self.amount.value)
            await bot.get_command("balance deposit").callback(ctx, member_obj, amount_value)
            await interaction.response.send_message(f"‚úÖ –ë–∞–ª–∞–Ω—Å {member_obj.display_name} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount_value} —Å–µ—Ä–µ–±—Ä–∞.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", ephemeral=True)


class WithdrawModal(Modal, title="–°–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å"):
    member = TextInput(label="–£—á–∞—Å—Ç–Ω–∏–∫ (ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)")
    amount = TextInput(label="–°—É–º–º–∞ —Å–Ω—è—Ç–∏—è")

    async def on_submit(self, interaction: discord.Interaction):
        ctx = await bot.get_context(interaction.message)
        try:
            member_obj = interaction.guild.get_member(int(self.member.value))
            amount_value = int(self.amount.value)
            await bot.get_command("balance withdraw").callback(ctx, member_obj, amount_value)
            await interaction.response.send_message(f"üí≥ –°–Ω—è—Ç–æ {amount_value} —Å–µ—Ä–µ–±—Ä–∞ —É {member_obj.display_name}.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", ephemeral=True)


class TransferModal(Modal, title="–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"):
    recipient = TextInput(label="–ü–æ–ª—É—á–∞—Ç–µ–ª—å (ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)")
    amount = TextInput(label="–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")

    async def on_submit(self, interaction: discord.Interaction):
        ctx = await bot.get_context(interaction.message)
        try:
            recipient_obj = interaction.guild.get_member(int(self.recipient.value))
            amount_value = int(self.amount.value)
            await bot.get_command("balance transfer").callback(ctx, recipient_obj, amount_value)
            await interaction.response.send_message(f"üîÑ {amount_value} —Å–µ—Ä–µ–±—Ä–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {recipient_obj.display_name}.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", ephemeral=True)


import re

class HistoryModal(Modal, title="–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞"):
    member = TextInput(label="ID –∏–ª–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", required=False)

    async def on_submit(self, interaction: discord.Interaction):
        ctx = await bot.get_context(interaction.message)

        member_text = self.member.value.strip()
        member_obj = None

        if not member_text:  # –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –±–µ—Ä–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
            member_obj = interaction.user
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥—ë–Ω –ª–∏ ID
            if member_text.isdigit():
                member_obj = interaction.guild.get_member(int(member_text))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥–µ–Ω–æ –ª–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            else:
                mention_match = re.match(r"<@!?(\d+)>", member_text)
                if mention_match:
                    member_id = int(mention_match.group(1))
                    member_obj = interaction.guild.get_member(member_id)

        if not member_obj:
            await interaction.response.send_message("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return

        await bot.get_command("balance history").callback(ctx, member_obj)
        await interaction.response.send_message("üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.", ephemeral=True)

# --- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è —à—Ç—Ä–∞—Ñ–æ–≤ ---

class FineModal(Modal, title="–í—ã–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ"):
    member = TextInput(label="–£—á–∞—Å—Ç–Ω–∏–∫ (ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)")
    amount = TextInput(label="–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞")
    reason = TextInput(label="–ü—Ä–∏—á–∏–Ω–∞")

    async def on_submit(self, interaction: discord.Interaction):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥—ë–Ω –ª–∏ ID
            member_text = self.member.value.strip()
            member_obj = None
            
            if member_text.isdigit():
                member_obj = interaction.guild.get_member(int(member_text))
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥–µ–Ω–æ –ª–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                mention_match = re.match(r"<@!?(\d+)>", member_text)
                if mention_match:
                    member_id = int(mention_match.group(1))
                    member_obj = interaction.guild.get_member(member_id)

            if not member_obj:
                await interaction.response.send_message("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
                return

            amount_value = int(self.amount.value)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–∞
            if not await has_role(interaction.user, FINANCIER_ROLE_ID):
                await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —à—Ç—Ä–∞—Ñ–∞.", ephemeral=True)
                return

            # –õ–æ–≥–∏—Ä—É–µ–º —à—Ç—Ä–∞—Ñ –≤ –±–∞–∑—É
            with sqlite3.connect(DB_NAME) as conn:
                c = conn.cursor()
                c.execute("INSERT INTO fines (user_id, amount, reason) VALUES (?, ?, ?)", 
                         (str(member_obj.id), amount_value, self.reason.value))
                fine_id = c.lastrowid
                conn.commit()

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å
            sync_fines_with_balance(member_obj.id)

            # –°–æ–∑–¥–∞—ë–º embed-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            embed = discord.Embed(
                title="üö´ **–ù–æ–≤—ã–π —à—Ç—Ä–∞—Ñ!** üö´",
                color=discord.Color.red()
            )
            embed.add_field(name="**–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:**", value=member_obj.mention, inline=False)
            embed.add_field(name="**–†–∞–∑–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞:**", value=f"{amount_value} —Å–µ—Ä–µ–±—Ä–∞", inline=False)
            embed.add_field(name="**–ü—Ä–∏—á–∏–Ω–∞:**", value=self.reason.value, inline=False)
            embed.add_field(name="**–í—ã–¥–∞–ª —à—Ç—Ä–∞—Ñ:**", value=interaction.user.mention, inline=False)
            embed.add_field(name="**–ù–æ–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞:**", value=fine_id, inline=False)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —à—Ç—Ä–∞—Ñ–æ–≤
            fine_channel = interaction.guild.get_channel(FINE_CHANNEL_ID)
            if fine_channel:
                await fine_channel.send(embed=embed)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å —à—Ç—Ä–∞—Ñ–Ω–∏–∫–∞
            fine_role = discord.utils.get(interaction.guild.roles, id=FINE_ROLE_ID)
            if fine_role and fine_role not in member_obj.roles:
                await member_obj.add_roles(fine_role)

            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°
            try:
                await member_obj.send(embed=embed)
                status_msg = messages["fine_sent_to_dm"].format(user_mention=member_obj.mention)
            except discord.Forbidden:
                status_msg = messages["fine_failed_to_dm"].format(user_mention=member_obj.mention)

            # –õ–æ–≥–∏—Ä—É–µ–º
            log_channel = interaction.guild.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                await log_channel.send(f"‚úÖ –®—Ç—Ä–∞—Ñ –¥–ª—è {member_obj.mention} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {fine_channel.mention}!")
                await log_channel.send(status_msg)

            await interaction.response.send_message("‚úÖ –®—Ç—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω.", ephemeral=True)
            logging.info(f"–®—Ç—Ä–∞—Ñ –≤—ã–¥–∞–Ω: {member_obj} | –°—É–º–º–∞: {amount_value} | –ü—Ä–∏—á–∏–Ω–∞: {self.reason.value} | –í—ã–¥–∞–ª: {interaction.user}")

        except ValueError as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. {str(e)}", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)


class CloseFineModal(Modal, title="–ó–∞–∫—Ä—ã—Ç—å —à—Ç—Ä–∞—Ñ"):
    fine_id = TextInput(label="ID —à—Ç—Ä–∞—Ñ–∞")

    async def on_submit(self, interaction: discord.Interaction):
        ctx = await bot.get_context(interaction.message)
        try:
            fine_id_int = int(self.fine_id.value)
            await bot.get_command("close_fine").callback(ctx, fine_id_int)
            await interaction.response.send_message("‚úÖ –®—Ç—Ä–∞—Ñ –∑–∞–∫—Ä—ã—Ç.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", ephemeral=True)


# --- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª-—Ä–æ–ª—å—é ---

class AddChannelRoleModal(Modal, title="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª-—Ä–æ–ª—å"):
    channel_id = TextInput(label="ID –∫–∞–Ω–∞–ª–∞")
    role_id = TextInput(label="ID —Ä–æ–ª–∏")

    async def on_submit(self, interaction: discord.Interaction):
        ctx = await bot.get_context(interaction.message)
        try:
            await bot.get_command("add_channel_role").callback(ctx, int(self.role_id.value), int(self.channel_id.value))
            await interaction.response.send_message("‚úÖ –ö–∞–Ω–∞–ª-—Ä–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", ephemeral=True)


class RemoveChannelRoleModal(Modal, title="–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª-—Ä–æ–ª—å"):
    channel_id = TextInput(label="ID –∫–∞–Ω–∞–ª–∞")

    async def on_submit(self, interaction: discord.Interaction):
        ctx = await bot.get_context(interaction.message)
        try:
            await bot.get_command("remove_channel_role").callback(ctx, int(self.channel_id.value))
            await interaction.response.send_message("‚úÖ –ö–∞–Ω–∞–ª-—Ä–æ–ª—å —É–¥–∞–ª–µ–Ω–∞.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", ephemeral=True)


class UpdateMessageModal(Modal, title="–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"):
    key = TextInput(label="–ö–ª—é—á —Å–æ–æ–±—â–µ–Ω–∏—è")
    new_message = TextInput(label="–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", style=discord.TextStyle.paragraph)

    async def on_submit(self, interaction: discord.Interaction):
        ctx = await bot.get_context(interaction.message)
        await bot.get_command("update_message").callback(ctx, self.key.value, self.new_message.value)
        await interaction.response.send_message("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", ephemeral=True)


class SendMessageModal(Modal, title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°"):
    member_id = TextInput(label="ID –∏–ª–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    text = TextInput(label="–°–æ–æ–±—â–µ–Ω–∏–µ", style=discord.TextStyle.paragraph)

    async def on_submit(self, interaction: discord.Interaction):
        ctx = await bot.get_context(interaction.message)
        member_text = self.member_id.value.strip()
        member_obj = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥—ë–Ω –ª–∏ ID
        if member_text.isdigit():
            member_obj = interaction.guild.get_member(int(member_text))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥–µ–Ω–æ –ª–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        else:
            mention_match = re.match(r"<@!?(\d+)>", member_text)
            if mention_match:
                member_id = int(mention_match.group(1))
                member_obj = interaction.guild.get_member(member_id)

        if not member_obj:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return

        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°
        try:
            await member_obj.send(f"üì© **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {interaction.user.display_name}:**\n{self.text.value}")
            await interaction.response.send_message("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message(f"‚ö†Ô∏è {member_obj.mention} –∑–∞–∫—Ä—ã–ª –õ–°, –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}", ephemeral=True)

# --- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (UI-–∫–Ω–æ–ø–∫–∏) ---

class BalanceView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", style=discord.ButtonStyle.primary)
    async def my_balance_button(self, interaction: discord.Interaction, button: Button):
        user = interaction.user
        current_balance = balance_manager.get_balance(user.id)
        response = f"üí∞ {user.mention}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {current_balance} —Å–µ—Ä–µ–±—Ä–∞."
        await interaction.response.send_message(response, ephemeral=True)

    @discord.ui.button(label="üèÜ –¢–æ–ø –±–∞–ª–∞–Ω—Å–∞", style=discord.ButtonStyle.secondary)
    async def balance_top_button(self, interaction: discord.Interaction, button: Button):
        top_list = balance_manager.top_balances()
        msg = "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n"
        for i, (member_id, bal, nickname) in enumerate(top_list[:40], 1):
            name = nickname if nickname else str(member_id)
            msg += f"{i}. {name}: {bal} —Å–µ—Ä–µ–±—Ä–∞\n"
        await interaction.response.send_message(msg, ephemeral=True)

class TelegramView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram", style=discord.ButtonStyle.success)
    async def link_telegram_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer(ephemeral=True)
        ctx = await bot.get_context(interaction.message)
        ctx.author = interaction.user
        await bot.get_command("link_telegram").callback(ctx)
        await interaction.followup.send("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!", ephemeral=True)

@bot.command(name="telegram_panel")
async def create_telegram_panel(ctx):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return

    embed = discord.Embed(
        title="üîó –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram",
        description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≤—è–∑–∫–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
                   "–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ–±–æ–∏—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö!\n\n"
                   "VK - https://vk.com/hell_branch\n"
                   "YouTube - https://youtube.com/@6beastofnonation9?si=ezsIKf5WWHzyBB13\n"
                   "Twitch - https://www.twitch.tv/hell_branch\n"
                   "Instagram - https://www.instagram.com/_hell_branch_?igsh=cWQzZXo0ODBhYWRs",
        color=discord.Color.blue()
    )
    
    await ctx.send(embed=embed, view=TelegramView())

@bot.command(name="balance_panel")
async def create_balance_panel(ctx):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return

    embed = discord.Embed(
        title="üí∞ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º",
        description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã:\n\n"
                   "üí∞ **–ú–æ–π –±–∞–ª–∞–Ω—Å** - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
                   "üèÜ **–¢–æ–ø –±–∞–ª–∞–Ω—Å–∞** - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É",
        color=discord.Color.gold()
    )
    
    await ctx.send(embed=embed, view=BalanceView())
    await ctx.message.delete()



class CommandControlPanel(View):
    def __init__(self):
        super().__init__(timeout=None)

    async def log_button_action(self, interaction, message):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫"""
        log_channel = bot.get_channel(LOG_ALL_CHANNEL_ID)
        if log_channel:
            await log_channel.send(f"üìå **–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞:** {message}")

    @discord.ui.button(label="üí∞ –ë–∞–ª–∞–Ω—Å", style=discord.ButtonStyle.primary)
    async def balance_button(self, interaction: discord.Interaction, button: Button):
        user = interaction.user
        current_balance = balance_manager.get_balance(user.id)
        response = f"üí∞ {user.mention}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {current_balance} —Å–µ—Ä–µ–±—Ä–∞."
        await interaction.response.send_message(response, ephemeral=True)
        await self.log_button_action(interaction, response)

    @discord.ui.button(label="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", style=discord.ButtonStyle.success)
    async def deposit_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(DepositModal())
        await self.log_button_action(interaction, "–û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.")

    @discord.ui.button(label="üí≥ –°–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å", style=discord.ButtonStyle.danger)
    async def withdraw_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(WithdrawModal())
        await self.log_button_action(interaction, "–û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–Ω—è—Ç–∏—è –±–∞–ª–∞–Ω—Å–∞.")

    @discord.ui.button(label="üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", style=discord.ButtonStyle.primary)
    async def transfer_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(TransferModal())
        await self.log_button_action(interaction, "–û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.")

    @discord.ui.button(label="üïí –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞", style=discord.ButtonStyle.secondary)
    async def history_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(HistoryModal())
        await self.log_button_action(interaction, "–û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")

    @discord.ui.button(label="‚öñÔ∏è –®—Ç—Ä–∞—Ñ", style=discord.ButtonStyle.danger)
    async def fine_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(FineModal())
        await self.log_button_action(interaction, "–û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–¥–∞—á–∏ —à—Ç—Ä–∞—Ñ–∞.")

    @discord.ui.button(label="‚úÖ –ó–∞–∫—Ä—ã—Ç—å —à—Ç—Ä–∞—Ñ", style=discord.ButtonStyle.success)
    async def close_fine_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(CloseFineModal())
        await self.log_button_action(interaction, "–û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–∏—è —à—Ç—Ä–∞—Ñ–∞.")
    @discord.ui.button(label="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.danger)
    async def clear_channel_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer(ephemeral=True)
        ctx = await bot.get_context(interaction.message)
        channel = ctx.channel
        try:
            pinned_messages = await channel.pins()
            pinned_ids = [msg.id for msg in pinned_messages]
            deleted = await channel.purge(check=lambda m: m.id not in pinned_ids)
            await interaction.followup.send(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(deleted)} —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö).", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞–Ω–∞–ª–∞: {str(e)}", ephemeral=True)


# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
@bot.command()
@commands.has_permissions(administrator=True)
async def –ø–∞–Ω–µ–ª—å(ctx):
    embed = discord.Embed(
        title="üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º",
        description="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.",
        color=discord.Color.blurple()
    )
    await ctx.send(embed=embed, view=CommandControlPanel())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ messages.json
def load_messages():
    with open("../messages.json", "r", encoding="utf-8") as f:
        return json.load(f)

messages = load_messages()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å config.json (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–ø—ã)
def load_config_file():
    with open(config_file_path, "r") as config_file:
        return json.load(config_file)

def save_config_file(new_config):
    with open(config_file_path, "w") as config_file:
        json.dump(new_config, config_file, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
def init_db():
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("PRAGMA foreign_keys = ON")
        c = conn.cursor()
        # –¢–∞–±–ª–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–∞
        c.execute("""
            CREATE TABLE IF NOT EXISTS balances (
                member_id TEXT PRIMARY KEY,
                balance INTEGER NOT NULL DEFAULT 0,
                nickname TEXT
            )
        """)
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        c.execute("""
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                type TEXT NOT NULL,
                member_id TEXT NOT NULL,
                amount INTEGER NOT NULL,
                note TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        # –¢–∞–±–ª–∏—Ü–∞ —à—Ç—Ä–∞—Ñ–æ–≤
        c.execute("""
            CREATE TABLE IF NOT EXISTS fines (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT NOT NULL,
                amount INTEGER NOT NULL,
                reason TEXT,
                is_closed INTEGER DEFAULT 0
            )
        """)
        # –¢–∞–±–ª–∏—Ü–∞ —Å–±–æ—Ä–æ–≤
        c.execute("""
            CREATE TABLE IF NOT EXISTS parties (
                party_id INTEGER PRIMARY KEY AUTOINCREMENT,
                creator_id TEXT NOT NULL,
                info TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–±–æ—Ä–æ–≤
        c.execute("""
            CREATE TABLE IF NOT EXISTS party_members (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                party_id INTEGER NOT NULL,
                member_id TEXT NOT NULL,
                FOREIGN KEY(party_id) REFERENCES parties(party_id) ON DELETE CASCADE
            )
        """)
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–µ–π Discord-Telegram
        c.execute("""
            CREATE TABLE IF NOT EXISTS telegram_links (
                discord_id TEXT PRIMARY KEY,
                telegram_id TEXT NOT NULL,
                telegram_username TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –ø—Ä–∏–≤—è–∑–∫–∏
        c.execute("""
            CREATE TABLE IF NOT EXISTS telegram_link_codes (
                code TEXT PRIMARY KEY,
                discord_id TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.commit()

init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏–º–µ–µ—Ç –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ä–æ–ª—å
async def has_role(member, role_id):
    role = discord.utils.get(member.guild.roles, id=role_id)
    return role in member.roles if role else False

@bot.event
async def on_ready():
    logging.info(f"–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!")
    print(f"–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!")
    print("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", [cmd.name for cmd in bot.commands])

async def log_bot_response(ctx, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª"""
    log_channel = bot.get_channel(LOG_ALL_CHANNEL_ID)
    if log_channel:
        await log_channel.send(f"üìù **–û—Ç–≤–µ—Ç –±–æ—Ç–∞:** {message}")


# ==============================
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–ø–æ–π (—Ä–æ–ª—å -> –∫–∞–Ω–∞–ª—ã)
# ==============================
@bot.command(name="add_channel_role")
async def add_channel_role(ctx, role: discord.Role, channel: discord.TextChannel):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.", delete_after=5)
        return

    cfg = load_config_file()
    if "role_channel_map" not in cfg:
        cfg["role_channel_map"] = {}

    role_id = str(role.id)
    channel_id = str(channel.id)

    if role_id not in cfg["role_channel_map"]:
        cfg["role_channel_map"][role_id] = []

    if channel_id in cfg["role_channel_map"][role_id]:
        await ctx.send(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel.mention} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–æ–ª–∏ {role.mention}.", delete_after=5)
        return

    cfg["role_channel_map"][role_id].append(channel_id)
    save_config_file(cfg)
    await ctx.send(f"‚úÖ –ö–∞–Ω–∞–ª {channel.mention} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–æ–ª–∏ {role.mention}.")

@bot.command(name="remove_channel_role")
async def remove_channel_role(ctx, role: discord.Role, channel: discord.TextChannel):
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–ø—ã.", delete_after=5)
        return

    cfg = load_config_file()
    role_id = str(role.id)
    channel_id = str(channel.id)

    if "role_channel_map" not in cfg or role_id not in cfg["role_channel_map"]:
        await ctx.send(f"‚ö†Ô∏è –†–æ–ª—å {role.mention} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", delete_after=5)
        return

    if channel_id not in cfg["role_channel_map"][role_id]:
        await ctx.send(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel.mention} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–æ–ª–∏ {role.mention}.", delete_after=5)
        return

    cfg["role_channel_map"][role_id].remove(channel_id)
    save_config_file(cfg)
    await ctx.send(f"‚úÖ –ö–∞–Ω–∞–ª {channel.mention} –æ—Ç–≤—è–∑–∞–Ω –æ—Ç —Ä–æ–ª–∏ {role.mention}.")

@bot.command(name="list_channel_roles")
async def list_channel_roles(ctx):
    cfg = load_config_file()
    mapping = cfg.get("role_channel_map", {})
    if not mapping:
        await ctx.send("‚ÑπÔ∏è –ú–∞–ø–∞ —Ä–æ–ª–µ–π –∏ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç–∞.")
        return

    msg = "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–æ–∫:\n"
    for role_id, channels in mapping.items():
        role_obj = ctx.guild.get_role(int(role_id))
        role_name = role_obj.name if role_obj else f"ID:{role_id}"
        channel_mentions = []
        for ch_id in channels:
            channel_obj = ctx.guild.get_channel(int(ch_id))
            if channel_obj:
                channel_mentions.append(channel_obj.mention)
            else:
                channel_mentions.append(f"ID:{ch_id}")
        msg += f"**{role_name}**: {', '.join(channel_mentions)}\n"
    await ctx.send(msg)

# ==============================
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –õ–°
# ==============================
@bot.event
@bot.event
async def on_message(message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if message.author.bot:
        return

    # ‚úÖ 1. –õ–° —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤
    if isinstance(message.channel, discord.DMChannel):
        guild = bot.guilds[0]  # –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥–∏–ª—å–¥–∏—é
        log_channel = guild.get_channel(DM_LOG_CHANNEL_ID)

        if log_channel:
            embed = discord.Embed(
                title="üì© –ù–æ–≤–æ–µ –õ–° –±–æ—Ç—É",
                description=message.content or "*–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞*",
                color=discord.Color.purple(),
                timestamp=message.created_at
            )
            embed.set_author(name=message.author.display_name, icon_url=message.author.avatar.url if message.author.avatar else None)

            if message.attachments:
                attachments_list = "\n".join([att.url for att in message.attachments])
                embed.add_field(name="–í–ª–æ–∂–µ–Ω–∏—è", value=attachments_list, inline=False)

            await log_channel.send(embed=embed)

    # ‚úÖ 2. –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–∞–Ω–∞–ª–æ–≤ –≤ –õ–°, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —É–∂–µ —Å–¥–µ–ª–∞–ª (–∏–∑ role_channel_map)
    cfg = load_config_file()
    role_channel_map = cfg.get("role_channel_map", {})
    sent_members = set()

    for role_id_str, channel_ids in role_channel_map.items():
        if str(message.channel.id) in channel_ids:
            role_obj = message.guild.get_role(int(role_id_str))
            if not role_obj:
                continue
            for member in message.guild.members:
                if member.bot:
                    continue
                if role_obj in member.roles and member.id not in sent_members:
                    try:
                        embed = discord.Embed(
                            title=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ #{message.channel.name}",
                            description=message.content or "*–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞*",
                            color=discord.Color.blue()
                        )
                        embed.set_footer(text=f"–ê–≤—Ç–æ—Ä: {message.author.display_name}")
                        await member.send(embed=embed)
                        sent_members.add(member.id)
                        await asyncio.sleep(1)
                    except discord.Forbidden:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å DM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.name}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.name}: {e}")

    # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
    await bot.process_commands(message)

# ==============================
# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# ==============================
class BalanceManager:
    def __init__(self, db_name=DB_NAME):
        self.db_name = db_name

    def get_connection(self):
        conn = sqlite3.connect(self.db_name)
        conn.row_factory = sqlite3.Row
        return conn

    def get_balance(self, member_id):
        with self.get_connection() as conn:
            c = conn.cursor()
            c.execute("SELECT balance FROM balances WHERE member_id = ?", (str(member_id),))
            row = c.fetchone()
            return row["balance"] if row else 0

    def deposit(self, member_id, amount, nickname="", by=None, note=""):
        if amount < 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        with self.get_connection() as conn:
            c = conn.cursor()
            current = self.get_balance(member_id)
            new_balance = current + amount
            c.execute("INSERT OR REPLACE INTO balances (member_id, balance, nickname) VALUES (?, ?, ?)",
                      (str(member_id), new_balance, nickname))
            c.execute("INSERT INTO transactions (type, member_id, amount, note) VALUES (?, ?, ?, ?)",
                      ("DEPOSIT", str(member_id), amount, f"by {by}: {note}"))
            conn.commit()

    def withdraw(self, member_id, amount, nickname="", by=None, note=""):
        if amount < 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        current = self.get_balance(member_id)
        new_balance = current - amount  # –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with self.get_connection() as conn:
            c = conn.cursor()
            c.execute("UPDATE balances SET balance = ?, nickname = ? WHERE member_id = ?",
                    (new_balance, nickname, str(member_id)))
            c.execute("INSERT INTO transactions (type, member_id, amount, note) VALUES (?, ?, ?, ?)",
                    ("WITHDRAW", str(member_id), -amount, f"by {by}: {note}"))
            conn.commit()


    def transfer(self, from_member, to_member, amount, from_nickname="", to_nickname="", note=""):
        if amount < 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Å—Ç–∞—Ç–∫–∞:
    # if self.get_balance(from_member) < amount:
    #     raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
        self.withdraw(from_member, amount, nickname=from_nickname, by=from_member, note=f"Transfer to {to_member}. {note}")
        self.deposit(to_member, amount, nickname=to_nickname, by=from_member, note=f"Transfer from {from_member}. {note}")



    def top_balances(self, top_n=100):
        with self.get_connection() as conn:
            c = conn.cursor()
            c.execute("SELECT member_id, balance, nickname FROM balances ORDER BY balance DESC LIMIT ?", (top_n,))
            rows = c.fetchall()
            return [(row["member_id"], row["balance"], row["nickname"]) for row in rows]

    def get_history(self, member_id):
        with self.get_connection() as conn:
            c = conn.cursor()
            c.execute("SELECT type, amount, note, timestamp FROM transactions WHERE member_id = ? ORDER BY timestamp DESC LIMIT 10", (str(member_id),))
            rows = c.fetchall()
            return [(row["type"], row["amount"], row["note"], row["timestamp"]) for row in rows]

balance_manager = BalanceManager()

# ==============================
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º (balance)
# ==============================
@bot.group(invoke_without_command=True)
async def balance(ctx):
    current_balance = balance_manager.get_balance(ctx.author.id)
    await ctx.send(messages["balance_show"].format(user_mention=ctx.author.mention, balance=current_balance))

@balance.command(name="deposit")
async def balance_deposit(ctx, member: discord.Member, amount: int):
    try:
        balance_manager.deposit(member.id, amount, nickname=member.display_name, by=ctx.author.id, note="Deposit command")
        response = f"üí∞ –ë–∞–ª–∞–Ω—Å {member.mention} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Å–µ—Ä–µ–±—Ä–∞."
        await ctx.send(response)
        await log_bot_response(ctx, response)
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        await ctx.send(error_message)
        await log_bot_response(ctx, error_message)


@balance.command(name="withdraw")
async def balance_withdraw(ctx, member: discord.Member, amount: int):
    if not await has_role(ctx.author, FINANCIER_ROLE_ID):
        response = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤."
        await ctx.send(response)
        await log_bot_response(ctx, response)
        return
    try:
        balance_manager.withdraw(member.id, amount, nickname=member.display_name, by=ctx.author.id, note="Withdraw command")
        response = f"üí≥ –°–Ω—è—Ç–æ {amount} —Å–µ—Ä–µ–±—Ä–∞ —É {member.mention}."
        await ctx.send(response)
        await log_bot_response(ctx, response)
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        await ctx.send(error_message)
        await log_bot_response(ctx, error_message)


@balance.command(name="transfer")
async def balance_transfer(ctx, member: discord.Member, amount: int):
    try:
        balance_manager.transfer(ctx.author.id, member.id, amount, 
                                 from_nickname=ctx.author.display_name, to_nickname=member.display_name,
                                 note="Transfer command")
        response = f"üîÑ {amount} —Å–µ—Ä–µ–±—Ä–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {member.mention}."
        await ctx.send(response)
        await log_bot_response(ctx, response)
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        await ctx.send(error_message)
        await log_bot_response(ctx, error_message)

@balance.command(name="top")
async def balance_top(ctx):
    if not await has_role(ctx.author, FINANCIER_ROLE_ID):
        await ctx.send(messages.get("balance_top_no_permission", "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ø–∞ –±–∞–ª–∞–Ω—Å–∞."))
        return
    top_list = balance_manager.top_balances()
    msg = "–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:\n"
    for member_id, bal, nickname in top_list:
        name = nickname if nickname else str(member_id)
        msg += f"{name}: {bal} —Å–µ—Ä–µ–±—Ä–∞\n"
    await ctx.send(msg)

@balance.command(name="history")
async def balance_history(ctx, member: discord.Member = None):
    target = member if member else ctx.author
    history = balance_manager.get_history(target.id)
    if not history:
        await ctx.send(messages.get("balance_history_empty", "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞."))
        return
    history_lines = "\n".join([f"{t} {amt} ({note}) - {timestamp}" for t, amt, note, timestamp in history])
    await ctx.send(messages["balance_history"].format(user_mention=target.mention, history=history_lines))

# ==============================
# –§—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–±–æ—Ä–∞–º–∏ (Party)
# ==============================
def create_party(creator_id, info):
    with sqlite3.connect(DB_NAME) as conn:
        conn.row_factory = sqlite3.Row
        c = conn.cursor()
        c.execute("INSERT INTO parties (creator_id, info) VALUES (?, ?)", (str(creator_id), info))
        party_id = c.lastrowid
        c.execute("INSERT INTO party_members (party_id, member_id) VALUES (?, ?)", (party_id, str(creator_id)))
        conn.commit()
    return party_id

def delete_party(party_id):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("DELETE FROM parties WHERE party_id = ?", (party_id,))
        c.execute("DELETE FROM party_members WHERE party_id = ?", (party_id,))
        conn.commit()
    return True

def add_party_member(party_id, member_id):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO party_members (party_id, member_id) VALUES (?, ?)", (party_id, str(member_id)))
        conn.commit()

def remove_party_member(party_id, member_id):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("DELETE FROM party_members WHERE party_id = ? AND member_id = ?", (party_id, str(member_id)))
        conn.commit()

def get_active_parties():
    with sqlite3.connect(DB_NAME) as conn:
        conn.row_factory = sqlite3.Row
        c = conn.cursor()
        c.execute("SELECT party_id, creator_id, info, created_at FROM parties")
        rows = c.fetchall()
        return [(row["party_id"], row["creator_id"], row["info"], row["created_at"]) for row in rows]

@bot.group(invoke_without_command=True)
async def party(ctx):
    parties = get_active_parties()
    if parties:
        msg = messages.get("party_active_header", "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä—ã:\n")
        for p_id, creator_id, info, _ in parties:
            with sqlite3.connect(DB_NAME) as conn:
                c = conn.cursor()
                c.execute("SELECT COUNT(*) FROM party_members WHERE party_id = ?", (p_id,))
                count = c.fetchone()[0]
            msg += messages["party_line"].format(party_id=p_id, info=info, count=count)
        await ctx.send(msg)
    else:
        await ctx.send(messages.get("party_no_active", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤."))

@party.command(name="create")
async def party_create(ctx, *, info: str):
    if not await has_role(ctx.author, CONTENT_MAKER_ROLE_ID):
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–±–æ—Ä–∞.")
        return
    party_id = create_party(ctx.author.id, info)
    await ctx.send(messages["party_create_success"].format(party_id=party_id, info=info))

@party.command(name="delete")
async def party_delete(ctx, party_id: int):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("SELECT creator_id FROM parties WHERE party_id = ?", (party_id,))
        row = c.fetchone()
    if not row:
        await ctx.send(messages["party_not_found"])
        return
    creator_id = int(row[0])
    if ctx.author.id != creator_id and not await has_role(ctx.author, CONTENT_MAKER_ROLE_ID):
        await ctx.send(messages["party_no_permission_delete"])
        return
    if delete_party(party_id):
        await ctx.send(messages["party_delete_success"].format(party_id=party_id))
    else:
        await ctx.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–±–æ—Ä–∞.")

@party.command(name="join")
async def party_join(ctx, party_id: int):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("SELECT party_id FROM parties WHERE party_id = ?", (party_id,))
        row = c.fetchone()
    if not row:
        await ctx.send(messages["party_not_found"])
        return
    add_party_member(party_id, ctx.author.id)
    await ctx.send(messages["party_join_success"].format(user_mention=ctx.author.mention, party_id=party_id))

@party.command(name="leave")
async def party_leave(ctx, party_id: int):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("SELECT party_id FROM parties WHERE party_id = ?", (party_id,))
        row = c.fetchone()
    if not row:
        await ctx.send(messages["party_not_found"])
        return
    remove_party_member(party_id, ctx.author.id)
    await ctx.send(messages["party_leave_success"].format(user_mention=ctx.author.mention, party_id=party_id))

@party.command(name="notify")
async def party_notify(ctx, party_id: int, *, message_text: str):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("SELECT member_id FROM party_members WHERE party_id = ?", (party_id,))
        members = c.fetchall()
    if not members:
        await ctx.send(messages["party_notify_no_members"])
        return
    for (member_id,) in members:
        if int(member_id) == ctx.author.id:
            continue
        member = ctx.guild.get_member(int(member_id))
        if member:
            try:
                await member.send(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —Å–±–æ—Ä—É ID {party_id}: {message_text}")
            except discord.Forbidden:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {member.name}.")
    await ctx.send(messages["party_notify_success"])

# ==============================
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞–º–∏
# ==============================
def sync_fines_with_balance(user_id):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —à—Ç—Ä–∞—Ñ–∞–º–∏"""
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤
        c.execute("SELECT COALESCE(SUM(amount), 0) FROM fines WHERE user_id = ? AND is_closed = 0", (str(user_id),))
        total_fines = c.fetchone()[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute("INSERT OR REPLACE INTO balances (member_id, balance) VALUES (?, -?)", (str(user_id), total_fines))
        conn.commit()

@bot.command(name="fine")
async def issue_fine(ctx, user: discord.Member, amount: int, *, reason: str = "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"):
    if not await has_role(ctx.author, FINANCIER_ROLE_ID):
        await ctx.send(messages["fine_no_permission"])
        return

    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —à—Ç—Ä–∞—Ñ –≤ –±–∞–∑—É
        with sqlite3.connect(DB_NAME) as conn:
            c = conn.cursor()
            c.execute("INSERT INTO fines (user_id, amount, reason) VALUES (?, ?, ?)", 
                     (str(user.id), amount, reason))
            fine_id = c.lastrowid
            conn.commit()

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å
        sync_fines_with_balance(user.id)

        # –°–æ–∑–¥–∞—ë–º embed-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        embed = discord.Embed(
            title="üö´ **–ù–æ–≤—ã–π —à—Ç—Ä–∞—Ñ!** üö´",
            color=discord.Color.red()
        )
        embed.add_field(name="**–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:**", value=user.mention, inline=False)
        embed.add_field(name="**–†–∞–∑–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞:**", value=f"{amount} —Å–µ—Ä–µ–±—Ä–∞", inline=False)
        embed.add_field(name="**–ü—Ä–∏—á–∏–Ω–∞:**", value=reason, inline=False)
        embed.add_field(name="**–í—ã–¥–∞–ª —à—Ç—Ä–∞—Ñ:**", value=ctx.author.mention, inline=False)
        embed.add_field(name="**–ù–æ–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞:**", value=fine_id, inline=False)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —à—Ç—Ä–∞—Ñ–æ–≤
        fine_channel = ctx.guild.get_channel(FINE_CHANNEL_ID)
        if fine_channel:
            await fine_channel.send(embed=embed)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å —à—Ç—Ä–∞—Ñ–Ω–∏–∫–∞
        fine_role = discord.utils.get(ctx.guild.roles, id=FINE_ROLE_ID)
        if fine_role and fine_role not in user.roles:
            await user.add_roles(fine_role)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_notification(user.id, None, embed=embed)

        # –õ–æ–≥–∏—Ä—É–µ–º
        log_channel = ctx.guild.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            await log_channel.send(f"‚úÖ –®—Ç—Ä–∞—Ñ –¥–ª—è {user.mention} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {fine_channel.mention}!")

        await ctx.send("‚úÖ –®—Ç—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω.", ephemeral=True)
        logging.info(f"–®—Ç—Ä–∞—Ñ –≤—ã–¥–∞–Ω: {user} | –°—É–º–º–∞: {amount} | –ü—Ä–∏—á–∏–Ω–∞: {reason} | –í—ã–¥–∞–ª: {ctx.author}")

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —à—Ç—Ä–∞—Ñ–∞: {str(e)}")

@bot.command(name="close_fine")
async def close_fine(ctx, fine_id: int):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("SELECT user_id, is_closed FROM fines WHERE id = ?", (fine_id,))
        result = c.fetchone()
        
        if result is None:
            await ctx.send(f"‚ùó –®—Ç—Ä–∞—Ñ —Å –Ω–æ–º–µ—Ä–æ–º `{fine_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        user_id, is_closed = result
        
        if is_closed == 1:
            await ctx.send(f"‚ùó –®—Ç—Ä–∞—Ñ —Å –Ω–æ–º–µ—Ä–æ–º `{fine_id}` —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
            return
        
        c.execute("UPDATE fines SET is_closed = 1 WHERE id = ?", (fine_id,))
        conn.commit()

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —à—Ç—Ä–∞—Ñ–∞
    sync_fines_with_balance(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = ctx.guild.get_member(int(user_id))
    if user is None:
        await ctx.send(f"‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —à—Ç—Ä–∞—Ñ–Ω–∏–∫–∞
    fine_role = discord.utils.get(ctx.guild.roles, id=FINE_ROLE_ID)
    if fine_role is None:
        await ctx.send(f"‚ùó –†–æ–ª—å —à—Ç—Ä–∞—Ñ–Ω–∏–∫–∞ (ID `{FINE_ROLE_ID}`) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–∞ —Ä–æ–ª—å
    if fine_role not in user.roles:
        await ctx.send(f"‚ö†Ô∏è –£ {user.mention} –Ω–µ—Ç —Ä–æ–ª–∏ —à—Ç—Ä–∞—Ñ–Ω–∏–∫–∞, —Å–Ω–∏–º–∞—Ç—å –Ω–µ—á–µ–≥–æ.")
        return

    # –ü—Ä–æ–±—É–µ–º —Å–Ω—è—Ç—å —Ä–æ–ª—å –∏ –ª–æ–≤–∏–º –æ—à–∏–±–∫–∏
    try:
        await user.remove_roles(fine_role)
        await ctx.send(f"‚úÖ –†–æ–ª—å —à—Ç—Ä–∞—Ñ–Ω–∏–∫–∞ —Å–Ω—è—Ç–∞ —Å {user.mention}.")
    except discord.Forbidden:
        await ctx.send(f"‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ —Å–Ω–∏–º–∞—Ç—å —Ä–æ–ª—å {fine_role.mention}. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞!")
    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ä–æ–ª–∏: {e}")


# ==============================
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (update_message)
# ==============================
@bot.command(name="update_message")
async def update_message_command(ctx, key: str, *, new_message: str):
    if not await has_role(ctx.author, ROLE_ID):
        await ctx.send(messages["update_message_no_permission"])
        return
    current = load_messages()
    current[key] = new_message
    with open("messages.json", "w", encoding="utf-8") as f:
        json.dump(current, f, indent=4, ensure_ascii=False)
    await ctx.send(messages["update_message_success"].format(key=key))

@bot.command(name="m")
async def send_message(ctx, members: commands.Greedy[discord.Member], roles: commands.Greedy[discord.Role], *, message_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —É–ø–æ–º—è–Ω—É—Ç—ã—Ö —Ä–æ–ª–µ–π."""
    recipients = set(members)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —É–ø–æ–º—è–Ω—É—Ç—ã–µ —Ä–æ–ª–∏
    for role in roles:
        recipients.update(role.members)

    if not recipients:
        await ctx.send("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!m @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1 @—Ä–æ–ª—å1 ... —Å–æ–æ–±—â–µ–Ω–∏–µ`")
        return

    sent_count = 0
    failed_count = 0

    for member in recipients:
        if member.bot:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤

        try:
            await send_notification(
                member.id,
                f"üì© **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {ctx.author.display_name}:**\n{message_text}"
            )
            sent_count += 1
        except Exception as e:
            failed_count += 1
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {member.name}: {e}")

    response = []
    if sent_count:
        response.append(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    if failed_count:
        response.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {failed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    
    await ctx.send("\n".join(response))

    try:
        await ctx.message.delete()
    except:
        pass

@bot.command(name="link_telegram")
async def link_telegram_cmd(ctx):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram"""
    try:
        code = await generate_link_code(ctx.author.id)
        
        embed = discord.Embed(
            title="üîó –ü—Ä–∏–≤—è–∑–∫–∞ Telegram",
            description=(
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
                "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @HellBranch_bot\n"
                "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É:\n"
                f"```\n/link {code}\n```\n"
                "‚ö†Ô∏è –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç"
            ),
            color=discord.Color.blue()
        )            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ link_telegram: {e}")
        await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞.", ephemeral=True)

@bot.command(name="help")
async def help_command(ctx):
    help_message = (
        "**–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:**\n\n"
        "**–ü–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
        "`!–ø–∞–Ω–µ–ª—å` - –û—Ç–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).\n"
        "`!balance_panel` - –°–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).\n\n"
        "**–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ä–æ–ª–µ–π:**\n"
        "`!add_channel_role [—Ä–æ–ª—å] [–∫–∞–Ω–∞–ª]` - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª –∫ —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).\n"
        "`!remove_channel_role [—Ä–æ–ª—å] [–∫–∞–Ω–∞–ª]` - –û—Ç–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª –æ—Ç —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).\n"
        "`!list_channel_roles` - –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–æ–∫ —Ä–æ–ª–µ–π –∏ –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        "**–ë–∞–ª–∞–Ω—Å:**\n"
        "`!balance` - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å.\n"
        "`!balance deposit [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [—Å—É–º–º–∞]` - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (—Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç).\n"
        "`!balance withdraw [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [—Å—É–º–º–∞]` - –°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç).\n"
        "`!balance transfer [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [—Å—É–º–º–∞]` - –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n"
        "`!balance top` - –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É (—Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç).\n"
        "`!balance history [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]` - –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n"
        "`!update_balances` - –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).\n\n"
        "**–°–±–æ—Ä—ã:**\n"
        "`!party` - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä—ã.\n"
        "`!party create [–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]` - –°–æ–∑–¥–∞—Ç—å —Å–±–æ—Ä (—Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä).\n"
        "`!party delete [ID —Å–±–æ—Ä–∞]` - –£–¥–∞–ª–∏—Ç—å —Å–±–æ—Ä.\n"
        "`!party join [ID —Å–±–æ—Ä–∞]` - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–±–æ—Ä—É.\n"
        "`!party leave [ID —Å–±–æ—Ä–∞]` - –ü–æ–∫–∏–Ω—É—Ç—å —Å–±–æ—Ä.\n"
        "`!party notify [ID —Å–±–æ—Ä–∞] [—Å–æ–æ–±—â–µ–Ω–∏–µ]` - –£–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–±–æ—Ä–∞.\n\n"
        "**–®—Ç—Ä–∞—Ñ—ã:**\n"
        "`!fine [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [—Å—É–º–º–∞] [–ø—Ä–∏—á–∏–Ω–∞]` - –í—ã–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ (—Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç).\n"
        "`!close_fine [–Ω–æ–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞]` - –ó–∞–∫—Ä—ã—Ç—å —à—Ç—Ä–∞—Ñ –∏ —Å–Ω—è—Ç—å —Ä–æ–ª—å —à—Ç—Ä–∞—Ñ–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç).\n\n"
        "**–°–æ–æ–±—â–µ–Ω–∏—è:**\n"
        "`!update_message [–∫–ª—é—á] [–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]` - –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ä–æ–ª—å—é).\n"
        "`!m [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1] [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å2] ... [—Å–æ–æ–±—â–µ–Ω–∏–µ]` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°.\n"
        "`!help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    await ctx.send(help_message)

@bot.command(name="get_user_id")
async def get_user_id(ctx, username: str):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –Ω–∏–∫—É –≤ Discord"""
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
        
    members = ctx.guild.members
    found = False
    for member in members:
        if username.lower() in member.name.lower() or (member.nick and username.lower() in member.nick.lower()):
            await ctx.send(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {member.name}#{member.discriminator} (ID: {member.id})")
            found = True
    
    if not found:
        await ctx.send(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.command(name="update_balances")
@commands.has_permissions(administrator=True)
async def update_balances(ctx, *, data: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞"""
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏–ª–∏ —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π
        lines = [line.strip() for line in data.replace(';', '\n').split('\n')]
        updated = 0
        errors = []

        for line in lines:
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not line.strip():
                    continue
                
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É
                if ':' not in line:
                    errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ (–Ω–µ—Ç ':'): {line}")
                    continue

                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∏–º—è –∏ —Å—É–º–º—É
                name_part, amount_str = line.split(':', 1)
                
                # –û—á–∏—â–∞–µ–º —Å—É–º–º—É –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ
                amount = int(amount_str.strip().replace(' ', ''))
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                username = name_part.split('|')[0].strip().strip('@')
                
                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                member = None
                for guild_member in ctx.guild.members:
                    if username.lower() in guild_member.name.lower() or (guild_member.nick and username.lower() in guild_member.nick.lower()):
                        member = guild_member
                        break
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if username.isdigit() and str(guild_member.id) == username:
                        member = guild_member
                        break

                if member:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å (—Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω—É–ª—è–µ–º, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ–º)
                    balance_manager.withdraw(member.id, balance_manager.get_balance(member.id), nickname=member.display_name, by=ctx.author.id, note="Balance reset")
                    balance_manager.deposit(member.id, amount, nickname=member.display_name, by=ctx.author.id, note="Balance update")
                    updated += 1
                else:
                    errors.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {username}")

            except ValueError as e:
                errors.append(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ '{line}': {str(e)}")
            except Exception as e:
                errors.append(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ '{line}': {str(e)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        report = f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–≤: {updated}\n"
        if errors:
            report += "\n‚ùå –û—à–∏–±–∫–∏:\n" + "\n".join(errors)
        
        await ctx.send(report)

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram —Å–≤—è–∑—è–º–∏
async def get_telegram_id(discord_id: str) -> str | None:
    """–ü–æ–ª—É—á–∞–µ—Ç Telegram ID –ø–æ Discord ID"""
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("SELECT telegram_id FROM telegram_links WHERE discord_id = ?", (str(discord_id),))
        result = c.fetchone()
        return result[0] if result else None

async def link_accounts(discord_id: str, telegram_id: int, telegram_username: str) -> bool:
    """–°–≤—è–∑—ã–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã Discord –∏ Telegram"""
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("""
            INSERT OR REPLACE INTO telegram_links 
            (discord_id, telegram_id, telegram_username) 
            VALUES (?, ?, ?)
        """, (str(discord_id), str(telegram_id), telegram_username))
        conn.commit()
    return True

async def generate_link_code(discord_id: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram"""
    code = secrets.token_hex(3)  # 6 —Å–∏–º–≤–æ–ª–æ–≤
    
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute("DELETE FROM telegram_link_codes WHERE discord_id = ?", (str(discord_id),))
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        c.execute(
            "INSERT INTO telegram_link_codes (code, discord_id) VALUES (?, ?)",
            (code, str(discord_id))
        )
        conn.commit()
    
    return code

async def verify_link_code(code: str, telegram_id: int, telegram_username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–≤—è–∑—å Discord-Telegram"""
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ –ø–æ–ª—É—á–∞–µ–º discord_id
        c.execute("""
        SELECT discord_id FROM telegram_link_codes 
        WHERE code = ? AND created_at > datetime('now', '-5 minutes')
        """, (code,))
        result = c.fetchone()
        
        if not result:
            return False
            
        discord_id = result[0]
        
        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        c.execute("DELETE FROM telegram_link_codes WHERE code = ?", (code,))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å
        c.execute("""
        INSERT OR REPLACE INTO telegram_links 
        (discord_id, telegram_id, telegram_username) 
        VALUES (?, ?, ?)
        """, (discord_id, str(telegram_id), telegram_username))
        
        conn.commit()
        
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_notification(discord_id: str, text: str | None = None, embed: discord.Embed | None = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Discord –∏ Telegram (–µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord
        user = bot.get_user(int(discord_id))
        if not user:
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Discord
        try:
            if text:
                await user.send(text)
            if embed:
                await user.send(embed=embed)
        except discord.Forbidden:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –õ–°
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É Telegram
        telegram_id = await get_telegram_id(discord_id)
        if not telegram_id:
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
        telegram_text = text or ""
        if embed:
            if telegram_text:
                telegram_text += "\n\n"
            telegram_text += f"**{embed.title}**\n\n" if embed.title else ""
            telegram_text += embed.description or ""
            for field in embed.fields:
                telegram_text += f"\n\n{field.name}\n{field.value}"
                
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if telegram_text:
            try:
                await telegram_bot.send_message(
                    chat_id=telegram_id,
                    text=telegram_text,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram {telegram_id}: {e}")
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_notification: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        discord_task = asyncio.create_task(bot.start(DISCORD_TOKEN))
        telegram_task = asyncio.create_task(start_telegram_bot())
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–æ–∏—Ö –±–æ—Ç–æ–≤
        await asyncio.gather(discord_task, telegram_task)
    except KeyboardInterrupt:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ Ctrl+C
        logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏
        if not telegram_bot.session.closed:
            await telegram_bot.session.close()
        await bot.close()

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
if __name__ == "__main__":
    asyncio.run(main())
